-- Teilaufgabe 3 QL

-- Aufgabe 1
SELECT CNAME FROM COCKTAIL;

--Aufgabe 2
SELECT * FROM LOKAL WHERE PLZ='39108';

--Aufgabe 3
SELECT DISTINCT PLZ FROM LOKAL;

--Aufgabe 4
SELECT * FROM ZUTAT WHERE (ALKOHOLGEHALT BETWEEN 0 AND 50);
--Wenn man unter Zutat nur die Ausgabe des Namen versteht:
SELECT ZNAME FROM ZUTAT WHERE (ALKOHOLGEHALT BETWEEN 0 AND 50);

--Aufgabe 5
SELECT CNAME FROM COCKTAIL WHERE (CNAME LIKE '___%i');

--Aufgabe 6
(SELECT GNAME FROM GLAS) UNION (SELECT CNAME FROM COCKTAIL);
--Wenn der Tabellenkopf (bisher noch GNAME) angepasst werden soll:
(SELECT GNAME AS NAMEN FROM GLAS) UNION (SELECT CNAME FROM COCKTAIL);

--Aufgabe 7
(SELECT CID FROM COCKTAIL) MINUS (SELECT CID FROM ZUTAT_COCKTAIL);

--Aufgabe 8
SELECT LNAME FROM LOKAL WHERE LID != ALL (SELECT LID FROM COCKTAIL, COCKTAIL_LOKAL WHERE COCKTAIL.CID=COCKTAIL_LOKAL.CID AND CNAME='Zombie');

--Aufgabe 9
SELECT AVG(ALKOHOLGEHALT) FROM ZUTAT;

--Aufgabe 10
SELECT CID, COUNT(ZID) AS ANZ_ZUTATEN, MIN(MENGE) AS MINIMUM_MENGENEINHEITEN, MAX(MENGE) AS MAXIMUM_MENGENEINHEITEN, SUM(MENGE) AS SUMME_MENGENEINHEITEN FROM ZUTAT_COCKTAIL GROUP BY CID;

--Aufgabe 11
SELECT CID, SUM(ALKOHOLGEHALT*MENGE)/SUM(MENGE) AS ALKOHOLGEHALT FROM ZUTAT_COCKTAIL, ZUTAT WHERE ZUTAT_COCKTAIL.ZID = ZUTAT.ZID GROUP BY CID;

--Aufgabe 12
SELECT GNAME FROM GLAS,COCKTAIL WHERE GLAS.GID=COCKTAIL.GID GROUP BY GNAME HAVING COUNT(GLAS.GID)>2;

--------------------------------------------------------------------------------

--Teilaufgabe 4 DDL DML

--Aufgabe 1
CREATE TABLE MEINE_COCKTAILS (
 CID number PRIMARY KEY,
 CNAME varchar2(20) NOT NULL,
 ALKOHOLISCH char(1) CHECK(ALKOHOLISCH='n' OR ALKOHOLISCH='y'),
 GID number NOT NULL,
 FOREIGN KEY (GID) REFERENCES GLAS (GID));
 
INSERT INTO MEINE_COCKTAILS (SELECT * FROM COCKTAIL);
  
 --Aufgabe 2
INSERT INTO MEINE_COCKTAILS VALUES (18,'Lila Kuh','y',2);
--Wenn man die GID von Schwenker nicht ablesen darf
--INSERT INTO MEINE_COCKTAILS SELECT 18,'Lila Kuh','y',(GID FROM GLAS WHERE GNAME='Schwenker');

--Aufgabe 3
UPDATE MEINE_COCKTAILS SET CNAME='Blaue Kuh' WHERE (CNAME='Lila Kuh');

--Aufgabe 4 
--gibt CID aus wo Campari als Zutat enthalten ist
--SELECT CID FROM ZUTAT_COCKTAIL, ZUTAT WHERE ZUTAT_COCKTAIL.ZID=ZUTAT.ZID AND ZNAME='Campari';
--SELECT * FROM MEINE_COCKTAILS WHERE CID = ANY (SELECT CID FROM ZUTAT_COCKTAIL, ZUTAT WHERE ZUTAT_COCKTAIL.ZID=ZUTAT.ZID AND ZNAME='Campari');
DELETE FROM MEINE_COCKTAILS WHERE CID = ANY (SELECT CID FROM ZUTAT_COCKTAIL, ZUTAT WHERE ZUTAT_COCKTAIL.ZID=ZUTAT.ZID AND ZNAME='Campari');

--Aufgabe 5
CREATE VIEW Cocktail_Alkoholgehalt AS SELECT CID, SUM(ALKOHOLGEHALT*MENGE)/SUM(MENGE) AS ALKOHOLGEHALT FROM ZUTAT_COCKTAIL, ZUTAT WHERE ZUTAT_COCKTAIL.ZID = ZUTAT.ZID GROUP BY CID;

--Aufgabe 6
GRANT ALL ON MEINE_COCKTAILS TO ANONYMOUS;

--Aufgabe 7
REVOKE DELETE ON MEINE_COCKTAILS FROM ANONYMOUS;
DROP TABLE MEINE_COCKTAILS;

--------------------------------------------------------------------------------

--Teilaufgabe 5.2 Punkt 3 

CREATE TABLE VERANSTALTUNG (
 VID number PRIMARY KEY,
 VTITEL varchar(50) NOT NULL,
 VDATUM date,
 LID number NOT NULL,
 FOREIGN KEY (LID) REFERENCES LOKAL (LID));

CREATE TABLE PERSON (
 PID number PRIMARY KEY,
 NACHNAME varchar(100) NOT NULL,
 VORNAME varchar(100) NOT NULL,
 LIEBLINGSCOCKTAIL number,
 FOREIGN KEY (LIEBLINGSCOCKTAIL) REFERENCES COCKTAIL (CID));

CREATE TABLE COCKTAILKAUF (
 CID number,
 PID number,
 ANZAHL integer DEFAULT 0,
 PRIMARY KEY(CID, PID),
 FOREIGN KEY (CID) REFERENCES COCKTAIL (CID),
 FOREIGN KEY (PID) REFERENCES PERSON (PID) ON DELETE CASCADE);

CREATE TABLE VERANSTALTUNGSBESUCH (
 VID number,
 PID number,
 PRIMARY KEY (VID, PID),
 FOREIGN KEY (VID) REFERENCES VERANSTALTUNG (VID),
 FOREIGN KEY (PID) REFERENCES PERSON (PID) ON DELETE CASCADE);
 
--------------------------------------------------------------------------------

--Teilaufgabe 5.3

--Testdaten einfuegen
INSERT INTO VERANSTALTUNG VALUES (1, 'Gluehweinmeile', date '2019-12-26', 12);
INSERT INTO VERANSTALTUNG VALUES (2, 'Abiparty der guten Schule', date '2021-04-01', 2);
INSERT INTO VERANSTALTUNG VALUES (3, 'Opa Krause wird 80', date '2021-02-13', 5);
INSERT INTO VERANSTALTUNG VALUES (4, 'Public Viewing', date '2021-03-20', 9);
INSERT INTO VERANSTALTUNG VALUES (5, 'Bar and Lounge', date '2021-06-14', 7);

INSERT INTO PERSON VALUES (1, 'Mustermann', 'Maria', 7); 
INSERT INTO PERSON VALUES (2, 'Nas', 'Anna', 14); 
INSERT INTO PERSON VALUES (3, 'Ghurt', 'Jo', 3);
INSERT INTO PERSON VALUES (4, 'Buktu', 'Tim', 3);
INSERT INTO PERSON VALUES (5, 'Baer', 'Johannes', NULL);
INSERT INTO PERSON VALUES (6, 'Platz', 'Alexander', NULL);

INSERT INTO COCKTAILKAUF VALUES (7,1,52);
INSERT INTO COCKTAILKAUF VALUES (10,2,1);
INSERT INTO COCKTAILKAUF VALUES (13,2,4);
INSERT INTO COCKTAILKAUF VALUES (1,3,2);
INSERT INTO COCKTAILKAUF VALUES (9,4,6);
INSERT INTO COCKTAILKAUF VALUES (7,4,2);
INSERT INTO COCKTAILKAUF VALUES (5,4,12);
INSERT INTO COCKTAILKAUF VALUES (4,5,8);

INSERT INTO VERANSTALTUNGSBESUCH VALUES (5,1);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (1,1);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (3,2);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (4,5);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (2,3);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (1,4);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (5,2);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (1,5);
INSERT INTO VERANSTALTUNGSBESUCH VALUES (1,3);

--Aufgabe 5.1
SELECT COUNT(LIEBLINGSCOCKTAIL) FROM PERSON;

--Aufgabe 5.2 
SELECT NACHNAME FROM PERSON WHERE PID != ALL (SELECT PID FROM VERANSTALTUNGSBESUCH);

--Aufgabe 5.3
SELECT PERSON.PID, NACHNAME, SUM(ANZAHL) FROM PERSON, COCKTAILKAUF WHERE PERSON.PID = COCKTAILKAUF.PID GROUP BY PERSON.PID,NACHNAME ORDER BY PERSON.PID;

--Aufgabe 5.4
(SELECT p1.NACHNAME, p2.NACHNAME FROM PERSON p1, PERSON p2
WHERE p1.LIEBLINGSCOCKTAIL = p2.LIEBLINGSCOCKTAIL AND p1.NACHNAME != p2.NACHNAME AND p1.PID < p2.PID)
INTERSECT
(SELECT p1.NACHNAME, p2.NACHNAME FROM PERSON p1, PERSON p2, VERANSTALTUNGSBESUCH bp1, VERANSTALTUNGSBESUCH bp2
WHERE p1.PID != p2.PID AND p1.PID = bp1.PID AND p2.PID = bp2.PID AND bp1.VID = bp2.VID);





